{
  "name": "Corth",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SYMBOL",
            "name": "include_statement"
          },
          {
            "type": "SYMBOL",
            "name": "macro_definition"
          },
          {
            "type": "SYMBOL",
            "name": "proc_definition"
          }
        ]
      }
    },
    "include_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "include"
        },
        {
          "type": "SYMBOL",
          "name": "string_literal"
        }
      ]
    },
    "proc_definition": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "proc"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "SYMBOL",
          "name": "procedure_signature"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "global_allocation": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "memory"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "name"
            }
          ]
        },
        {
          "type": "STRING",
          "value": "end"
        }
      ]
    },
    "procedure_signature": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "argument_signature"
        },
        {
          "type": "SYMBOL",
          "name": "return_signature"
        }
      ]
    },
    "argument_signature": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "intrinsic_type"
          }
        },
        {
          "type": "STRING",
          "value": "->"
        }
      ]
    },
    "return_signature": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "intrinsic_type"
          }
        },
        {
          "type": "STRING",
          "value": "in"
        }
      ]
    },
    "macro_definition": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "macro"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "expandable"
          }
        },
        {
          "type": "STRING",
          "value": "endmacro"
        }
      ]
    },
    "expandable": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "include"
        },
        {
          "type": "STRING",
          "value": "memory"
        },
        {
          "type": "STRING",
          "value": "proc"
        },
        {
          "type": "STRING",
          "value": "->"
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "STRING",
          "value": "end"
        },
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "STRING",
          "value": "else"
        },
        {
          "type": "STRING",
          "value": "while"
        },
        {
          "type": "STRING",
          "value": "do"
        },
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "STRING",
          "value": "peek"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "SYMBOL",
          "name": "string_literal"
        },
        {
          "type": "SYMBOL",
          "name": "intrinsic_type"
        }
      ]
    },
    "code_block": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "callable"
          }
        },
        {
          "type": "STRING",
          "value": "end"
        }
      ]
    },
    "else_code_block": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "callable"
          }
        },
        {
          "type": "STRING",
          "value": "else"
        }
      ]
    },
    "do_code_block": {
      "type": "SEQ",
      "members": [
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "callable"
          }
        },
        {
          "type": "STRING",
          "value": "do"
        }
      ]
    },
    "callable": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "local_allocation"
        },
        {
          "type": "SYMBOL",
          "name": "if_statement"
        },
        {
          "type": "SYMBOL",
          "name": "if_else_statement"
        },
        {
          "type": "SYMBOL",
          "name": "while_do_statement"
        },
        {
          "type": "SYMBOL",
          "name": "let_statement"
        },
        {
          "type": "SYMBOL",
          "name": "peek_statement"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "SYMBOL",
          "name": "string_literal"
        }
      ]
    },
    "local_allocation": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "memory"
        },
        {
          "type": "SYMBOL",
          "name": "name"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "name"
            }
          ]
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "if_else_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "SYMBOL",
          "name": "else_code_block"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "if_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "let_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "let"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "name"
          }
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "peek_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "peek"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "name"
          }
        },
        {
          "type": "STRING",
          "value": "in"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "while_do_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "while"
        },
        {
          "type": "SYMBOL",
          "name": "do_code_block"
        },
        {
          "type": "SYMBOL",
          "name": "code_block"
        }
      ]
    },
    "name": {
      "type": "PATTERN",
      "value": "[^ \\t\\n]+"
    },
    "string_literal": {
      "type": "PATTERN",
      "value": "\\\"[^\\\"]*\\\""
    },
    "intrinsic_type": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "int"
        },
        {
          "type": "STRING",
          "value": "bool"
        }
      ]
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": " "
    },
    {
      "type": "PATTERN",
      "value": "\\t"
    },
    {
      "type": "PATTERN",
      "value": "\\n"
    },
    {
      "type": "PATTERN",
      "value": "\\/\\/.*"
    },
    {
      "type": "PATTERN",
      "value": "\\/\\*(.|\\n)*\\*\\/"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}
